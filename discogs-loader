#!/bin/bash

# Download/show release-data from discogs.com
# Usage: discogs-loader rel-no [OPTIONAL your-discogs-token] 
# prints out release-data to stdout
# if you use the optional param "your-discogs-token"
# you will see the picture-url's to

# Copyright (C) 2016, Thomas Gollmer, th_goso@freenet.de
# Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License,
# wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren,
# entweder gemäß Version 3 der Lizenz oder (nach Ihrer Option) jeder späteren Version.
# Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird,
# aber OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der
# MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN BESTIMMTEN ZWECK.
# Details finden Sie in der GNU General Public License. Sie sollten ein Exemplar der GNU General Public License
# zusammen mit diesem Programm erhalten haben. Falls nicht, siehe <http://www.gnu.org/licenses/>.


# output format: (seperator = TAB)

# DISCOGS      12345
# TITLE        title
# YEAR         2000
# MAINARTISTS  artist1      artist2       ...
# LABELS       label1       label2        ...
# FORMATS      CD           Box-Set       ...
# GENRES       Rock         Folk          ...
# STYLES       Heavy Metal  Black Metal   ...
# TRACK        Position     Titel         trackartist1  trackartist2  ...
# TRACK        Position     Titel         trackartist1  trackartist2  ...
# TRACK        Position     Titel         trackartist1  trackartist2  ...
# HEADING      --           heading       trackartist1  trackartist2  ...
# TRACK        Position     Titel         trackartist1  trackartist2  ...
# .
# .
# PICURLS      url1         url2          ...


# Agent for curl
d_agent="github.com/thgoso/discogs-loader/"
# Discogs Release-Main-Page
d_relpage="https://api.discogs.com/releases"



# ------------------------------------------------------------------------------------------------------------------
# save json-data for release in "$reldata"
# Param: Discogs-Release-Number [Optional Discogs-Token]
function get_reldata ()
{
  if [ -n "$2" ] ; then
    reldata=$(curl --stderr /dev/null -A "$d_agent" "$d_relpage/$1" -H "Authorization: Discogs token=$2")
  else
    reldata=$(curl --stderr /dev/null -A "$d_agent" "$d_relpage/$1")
  fi
  retval="$?"

  if [ "$retval" != "0" ] ; then
    echo "Error while downloading !" >&2
    echo "\"curl\" retruns: $retval" >&2
    IFS="$old_IFS"
    exit 1
  fi

  if [ "$reldata" = '{"message": "Release not found."}' ]; then
    echo "Can't find release $relnr !" >&2
    IFS="$old_IFS"
    exit 1
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show Mainartists and save in "$mainartists[]"
function show_mainartists
{
  IFS=$'\n'
  mainartists=($(echo "$reldata" | jq '.artists[].name' | awk '{print substr($0, 2, length($0)-2)}'))
  IFS="$sep"
  echo -e "MAINARTISTS$sep${mainartists[*]}"
}
# ------------------------------------------------------------------------------------------------------------------
# show title
function show_title
{
  unset tmp
  tmp=$(echo "$reldata" | jq '.title' | awk '{print substr($0, 2, length($0)-2)}')
  echo -e "TITLE$sep$tmp"
}
# ------------------------------------------------------------------------------------------------------------------
# show labels
function show_labels
{
  unset tmp
  tmp=$(echo "$reldata" | jq '.labels[0].name')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    unset tmp
    tmp=($(echo "$reldata" | jq '.labels[].name' | awk '{print substr($0, 2, length($0)-2)}'))
    IFS="$sep"
    echo -e "LABELS$sep${tmp[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show release formats
function show_formats
{
  IFS=$'\n'
  unset tmp
  tmp=($(echo "$reldata" | jq '.formats[].name' | awk '{print substr($0, 2, length($0)-2)}'))
  unset tmp2
  tmp2=$(echo "$reldata" | jq '.formats[].descriptions[0]')
  if ! [ "$tmp2" == "null" ] ; then
    unset tmp2
    tmp2=($(echo "$reldata" | jq '.formats[].descriptions[]' | awk '{print substr($0, 2, length($0)-2)}'))
  fi
  IFS="$sep"
  if [ -n "${tmp2[0]}" ] ; then
    echo -e "FORMATS${sep}${tmp[*]}${sep}${tmp2[*]}"
  else
    echo -e "FORMATS${sep}${tmp[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show release year
function show_year
{
  unset tmp
  tmp=$(echo "$reldata" | jq '.released')
  if ! [ "$tmp" == "null" ] ; then
    unset tmp
    tmp=$(echo "$reldata" | jq '.released' | awk '{print substr($0, 2, 4)}')
    echo -e "YEAR$sep$tmp"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show genres
function show_genres
{
  unset tmp
  tmp=$(echo "$reldata" | jq '.genres[0]')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    unset tmp
    tmp=($(echo "$reldata" | jq '.genres[]' | awk '{print substr($0, 2, length($0)-2)}'))
    IFS="$sep"
    echo -e "GENRES$sep${tmp[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show styles
function show_styles
{
  unset tmp
  tmp=$(echo "$reldata" | jq '.styles[0]')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    unset tmp
    tmp=($(echo "$reldata" | jq '.styles[]' | awk '{print substr($0, 2, length($0)-2)}'))
    IFS="$sep"
    echo -e "STYLES$sep${tmp[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show picture url's
function show_picurls
{
  unset tmp
  tmp=$(echo "$reldata" | jq '.images[0].resource_url')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    unset tmp
    tmp=($(echo "$reldata" | jq '.images[].resource_url' | awk '{print substr($0, 2, length($0)-2)}'))
    IFS="$sep"
    if [ -n "$tmp" ] ; then
      echo -e "PICURLS$sep${tmp[*]}"
    fi
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show track
# Param: trackdata in json format
function show_track ()
{
    IFS=$'\n'
    unset line
    # cat TRACK/HEADING and Position to "$line"
    unset tmp
    tmp=$(echo "$1" | jq ".type_")
    # if tracktype == "track" ... get position else position = "--"
    if [ "$tmp" == '"track"' ] ; then
      line+=("TRACK")
      line+=($(echo "$1" | jq ".position" | awk '{print substr($0, 2, length($0)-2)}'))
    else
      line+=("HEADING")
      line+=("--")
    fi
    # cat title to "$line"
    unset tmp
    tmp=$(echo "$1" | jq ".title" | awk '{print substr($0, 2, length($0)-2)}')
    # trim leading and trailing whitespace from title
    line+=($(echo "$tmp" | awk '{gsub(/^ +| +$/,"")} {print $0}'))
    # cat trackartists to "$line"
    # if doesn't exists cat mainartist
    unset tmp
    tmp=$(echo "$1" | jq ".artists[0].name")
    if [ "$tmp" == "null" ] ; then
      line+=($(echo  "${mainartists[*]}"))
    else
      unset tmp
      tmp=($(echo "$1" | jq ".artists[].name" | awk '{print substr($0, 2, length($0)-2)}'))
      line+=($(echo "${tmp[*]}"))
    fi

    IFS="$sep"
    echo -e "${line[*]}"
}
# ------------------------------------------------------------------------------------------------------------------
# show tracklist
function show_tracklist
{
  # get tracklist length
  last_track=$(echo "$reldata" | jq '.tracklist | length')
  # loop over all tracks
  for ((track_cnt=0;track_cnt<last_track;track_cnt++)) ; do
    track=$(echo "$reldata" | jq ".tracklist[$track_cnt]")
    show_track "$track"
    # every track can have some subtracks...
    last_subtrack=$(echo "$reldata" | jq ".tracklist[$track_cnt].sub_tracks | length")
    if ! [ "$last_subtrack" == "0" ] ; then
      for ((subtrack_cnt=0;subtrack_cnt<last_subtrack;subtrack_cnt++)) ; do
        subtrack=$(echo "$track" | jq ".sub_tracks[$subtrack_cnt]")
        show_track "$subtrack"
      done
    fi
  done
}
# ------------------------------------------------------------------------------------------------------------------
# Main

# check first commandline param rel-no
if $(echo "$1" | grep -q '^[0-9]\+$'); then
  relnr="$1"
  token="$2"
else
  echo "Usage: discogs-loader releasenumber [token]" >&2
  exit 1
fi

# save old IFS... set new to TAB
old_IFS="$IFS"
sep=$'\t'

# load data
get_reldata "$relnr" "$token"
# show number, title and year (alsways two columns)
echo -e "DISCOGS${sep}${relnr}"
show_title
show_year
# show all the data with 2 or more columns
show_mainartists
show_labels
show_formats
show_genres
show_styles
show_tracklist
show_picurls

# restore
IFS="$old_IFS"
exit 0

