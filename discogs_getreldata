#!/bin/bash

# Download/show release-data from discogs.com
# Usage: discogs_getreldata rel-no
# prints out release-data to stdout
# if you have a discogs token in "$HOME/.config/discogs-loader/discogs.conf" defined
# you will see the picture-url's too

# Copyright (C) 2016-2017 Thomas Gollmer, th_goso@freenet.de
# Dieses Programm ist freie Software. Sie können es unter den Bedingungen der GNU General Public License,
# wie von der Free Software Foundation veröffentlicht, weitergeben und/oder modifizieren,
# entweder gemäß Version 3 der Lizenz oder (nach Ihrer Option) jeder späteren Version.
# Die Veröffentlichung dieses Programms erfolgt in der Hoffnung, daß es Ihnen von Nutzen sein wird,
# aber OHNE IRGENDEINE GARANTIE, sogar ohne die implizite Garantie der
# MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN BESTIMMTEN ZWECK.
# Details finden Sie in der GNU General Public License. Sie sollten ein Exemplar der GNU General Public License
# zusammen mit diesem Programm erhalten haben. Falls nicht, siehe <http://www.gnu.org/licenses/>.

# output format: (seperator = TAB)

# DISCOGS      12345
# TITLE        title
# YEAR         2000
# MASTERYEAR   1995
# MAINARTISTS  artist1      artist2       ...
# LABELS       label1       label2        ...
# FORMATS      CD           Box-Set       ...
# GENRES       Rock         Folk          ...
# STYLES       Heavy Metal  Black Metal   ...
# TRACK        position     title         trackartist1  trackartist2  ...
# TRACK        position     title         trackartist1  trackartist2  ...
# TRACK        position     title         trackartist1  trackartist2  ...
# HEADING      --           heading       trackartist1  trackartist2  ...
# TRACK        position     title         trackartist1  trackartist2  ...
# .
# .
# PICURLS      url1         url2          ...



# ------------------------------------------------------------------------------------------------------------------
# save json-data for release in "$g_reldata"
# Param: Discogs-Release-Number [Optional Discogs-Token]
function get_reldata ()
{
  if [ -n "$2" ] ; then
    g_reldata=$(curl --stderr /dev/null -A "$g_agent" "$g_relpage/$1" -H "Authorization: Discogs token=$2")
  else
    g_reldata=$(curl --stderr /dev/null -A "$g_agent" "$g_relpage/$1")
  fi
  local retval="$?"

  if [ "$retval" != "0" ] ; then
    echo "Error while downloading !" >&2
    echo "\"curl\" retruns: $retval" >&2
    exit 1
  fi

  if [ "$g_reldata" = '{"message": "Release not found."}' ]; then
    echo "Can't find release $1 !" >&2
    exit 1
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show Mainartists and save in "$g_mainartists[]"
function show_mainartists
{
  IFS=$'\n'
  g_mainartists=($(echo "$g_reldata" | jq -r '.artists[].name'))
  IFS="$g_sep"
  echo -e "MAINARTISTS$g_sep${g_mainartists[*]}"
}
# ------------------------------------------------------------------------------------------------------------------
# show title
function show_title
{
  local tmp=$(echo "$g_reldata" | jq -r '.title')
  echo -e "TITLE$g_sep$tmp"
}
# ------------------------------------------------------------------------------------------------------------------
# show labels
function show_labels
{
  local tmp=$(echo "$g_reldata" | jq -r '.labels[0].name')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    local names=($(echo "$g_reldata" | jq -r '.labels[].name'))
    IFS="$g_sep"
    echo -e "LABELS$g_sep${names[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show release formats
function show_formats
{
  IFS=$'\n'
  local tmp=($(echo "$g_reldata" | jq -r '.formats[].name'))
  local tmp2=$(echo "$g_reldata" | jq -r '.formats[].descriptions[0]')

  if ! [ "$tmp2" == "null" ] ; then
    unset tmp2
    local tmp2=($(echo "$g_reldata" | jq -r '.formats[].descriptions[]' 2> /dev/null))
  fi
  IFS="$g_sep"
  if [ -n "${tmp2[0]}" ] ; then
    echo -e "FORMATS${g_sep}${tmp[*]}${g_sep}${tmp2[*]}"
  else
    echo -e "FORMATS${g_sep}${tmp[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show release year and release year from master-release (if there is any)
function show_year
{
  local ryear=""
  local myear=""
  local tmp=""

  # year from release
  ryear=$(echo "$g_reldata" | jq -r '.year')
  echo -e "YEAR$g_sep$ryear"

  # year from main-release (if exists)
  tmp=$(echo "$g_reldata" | jq -r '.master_url')
  if ! [ "$tmp" = "null" ] ; then
    tmp=$(curl --stderr /dev/null -A "$g_agent" "$tmp")
    myear=$(echo "$tmp" | jq -r '.year')
    echo -e "MASTERYEAR$g_sep$myear"
  else
    echo -e "MASTERYEAR$g_sep$ryear"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show genres
function show_genres
{
  local tmp=$(echo "$g_reldata" | jq -r '.genres[0]')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    tmp=($(echo "$g_reldata" | jq -r '.genres[]'))
    IFS="$g_sep"
    echo -e "GENRES$g_sep${tmp[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show styles
function show_styles
{
  local tmp=$(echo "$g_reldata" | jq -r '.styles[0]')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    tmp=($(echo "$g_reldata" | jq -r '.styles[]'))
    IFS="$g_sep"
    echo -e "STYLES$g_sep${tmp[*]}"
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show picture url's
function show_picurls
{
  local tmp=$(echo "$g_reldata" | jq -r '.images[0].resource_url')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    tmp=($(echo "$g_reldata" | jq -r '.images[].resource_url'))
    IFS="$g_sep"
    if [ -n "$tmp" ] ; then
      echo -e "PICURLS$g_sep${tmp[*]}"
    fi
  fi
}
# ------------------------------------------------------------------------------------------------------------------
# show track
# Param: trackdata in json format
function show_track ()
{
  local line=""
  unset line
  local tmp=""

  IFS=$'\n'
  # cat TRACK/HEADING and Position to "$line"
  tmp=$(echo "$1" | jq -r ".type_")
  # if tracktype == "track" ... get position else position = "--"
  if [ "$tmp" == "track" ] ; then
    line+=("TRACK")
    line+=($(echo "$1" | jq -r ".position"))
  else
    line+=("HEADING")
    line+=("--")
  fi
  # cat title to "$line"
  tmp=$(echo "$1" | jq -r ".title")
  # trim leading and trailing whitespace from title
  line+=($(echo "$tmp" | awk '{gsub(/^ +| +$/,"")} {print $0}'))
  # cat trackartists to "$line"
  # if doesn't exists cat mainartist
  tmp=$(echo "$1" | jq -r ".artists[0].name")
  if [ "$tmp" == "null" ] ; then
    line+=($(echo  "${g_mainartists[*]}"))
  else
    unset tmp
    tmp=($(echo "$1" | jq -r ".artists[].name"))
    line+=($(echo "${tmp[*]}"))
  fi

  IFS="$g_sep"
  echo -e "${line[*]}"
}
# ------------------------------------------------------------------------------------------------------------------
# show tracklist
function show_tracklist
{
  local track=""
  local subtrack=""
  local last_track=""
  local last_subtrack=""
  local track_cnt=0
  local subtrack_cnt=0

  # get tracklist length
  last_track=$(echo "$g_reldata" | jq -r '.tracklist | length')
  # loop over all tracks
  for ((track_cnt=0;track_cnt<last_track;track_cnt++)) ; do
    track=$(echo "$g_reldata" | jq -r ".tracklist[$track_cnt]")
    show_track "$track"
    # every track can have some subtracks...
    last_subtrack=$(echo "$g_reldata" | jq -r ".tracklist[$track_cnt].sub_tracks | length")
    if ! [ "$last_subtrack" == "0" ] ; then
      for ((subtrack_cnt=0;subtrack_cnt<last_subtrack;subtrack_cnt++)) ; do
        subtrack=$(echo "$track" | jq -r ".sub_tracks[$subtrack_cnt]")
        show_track "$subtrack"
      done
    fi
  done
}
# ------------------------------------------------------------------------------------------------------------------

# show Barcodes

function show_barcodes
{
  local tmp=$(echo "$g_reldata" | jq -r '.identifiers[0]')
  if ! [ "$tmp" == "null" ] ; then
    IFS=$'\n'
    tmp=($(echo "$g_reldata" | jq -r '.identifiers[] | if .type == "Barcode" and .description == "String" then {type: .type, value: .value} else empty end'))
    IFS="$g_sep"
    if [ -n "$tmp" ] ; then
      echo -e "IDENTIFIERS$g_sep${tmp[*]}"
    fi
  fi
}
# ------------------------------------------------------------------------------------------------------------------

# Main

# global Variables
g_oldifs="$IFS"
g_sep=$'\t'
g_agent="github.com/thgoso/discogs-loader/"
g_relpage="https://api.discogs.com/releases"
g_reldata=""
g_mainartists=""



# Read token from $HOME/.config/discogs-loader/discogs.conf
if [ -e "$HOME/.config/discogs-loader/discogs.conf" ] ; then
  g_usertoken=$(cat "$HOME/.config/discogs-loader/discogs.conf" | awk '/^TOKEN/ {print $2}')
else
  g_usertoken=""
fi

# check first commandline param rel-no
if $(echo "$1" | grep -q '^[0-9]\+$'); then
  #load data into global var "g_reldata"
  get_reldata "$1" "$g_usertoken"
else
  echo "Usage: discogs_getreldata releasenumber" >&2
  exit 1
fi

# show number, title and year (alsways two columns)
echo -e "DISCOGS${g_sep}${1}"
show_title
show_year
# show all the data with 2 or more columns
show_mainartists
show_labels
show_formats
show_genres
show_styles
show_tracklist
show_picurls
show_barcodes

# restore
IFS="$g_oldifs"
exit 0


